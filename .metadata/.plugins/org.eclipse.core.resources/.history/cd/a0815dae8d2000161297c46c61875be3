package com.kitri.member.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.kitri.util.DBClose;
import com.kitri.util.DBConnection;

public class MemberDaoImpl implements MemberDao {

	@Override
	public int idCheck(String id) {
		return 0;
	}

	@Override
	public List<ZipDto> zipSearch(String dong) {
		List<ZipDto> list = new ArrayList<ZipDto>();
		//무조건 생성하므로 null이 나올일이 없다.
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = DBConnection.makeConnection();
			String sql = "";
			sql += "select substr(zipcode, 1, instr(zipcode, '-')-1) zip1, ";
			sql += "substr(zipcode, instr(zipcode, '-')+1) zip2, sido, gugun, ";
			sql += "dong, nvl(bunji, ' ') bunji, seq \n";
			sql += "from zipcode \n";
			sql += "where dong like '%'||?||'%' \n";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, dong);
			
			rs = pstmt.executeQuery();
			while (rs.next()) {
				ZipDto zipDto = new ZipDto();
				zipDto.setZip1(rs.getString("zip1"));
				zipDto.setZip2(rs.getString("zip2"));
				zipDto.setBunji(rs.getString("bunji"));
				zipDto.setDong(rs.getString("dong"));
				zipDto.setSido(rs.getString("sido"));
				zipDto.setGugun(rs.getString("gugun"));
				list.add(zipDto);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBClose.close(conn, pstmt, rs);
		}
		
		return list;
	}

	@Override
	public int register(MemberDto memberDto) {
		int cnt = 0;

		Connection conn = null;
		PreparedStatement pstmt = null;
		
		try {
			conn = DBConnection.makeConnection();
			
			String sql = "";
			sql += "insert into member (name, id, pass, email1, email2, zip1,";
			sql += "zip2, addr1, addr2, tel1, tel2, tel3, joindate)\n";
			sql += "values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, sysdate)";
			
			pstmt = conn.prepareStatement(sql);
			int idx = 1;
			pstmt.setString(idx++,memberDto.getName());
			pstmt.setString(idx++,memberDto.getId());
			pstmt.setString(idx++,memberDto.getPass());
			pstmt.setString(idx++,memberDto.getEmail1());
			pstmt.setString(idx++,memberDto.getEmail2());
			pstmt.setString(idx++,memberDto.getZip1());
			pstmt.setString(idx++,memberDto.getZip2());
			pstmt.setString(idx++,memberDto.getAddr1());
			pstmt.setString(idx++,memberDto.getAddr2());
			pstmt.setString(idx++,memberDto.getTel1());
			pstmt.setString(idx++,memberDto.getTel2());
			pstmt.setString(idx++,memberDto.getTel3());
			
			cnt = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				DBClose.close(conn, pstmt);
			} catch (Exception e2) {
			}
		}
		return cnt;
	}

	@Override
	public MemberDto getMember(String id) {
		return null;
	}

	@Override
	public int modify(MemberDto memberDto) {
		return 0;
	}

	@Override
	public int delete(String id) {
		return 0;
	}

	@Override
	public MemberDto login(Map<String, String> map) {
		MemberDto memberDto=null;
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = DBConnection.makeConnection();
			String sql = "";
				
			sql += "select id, name, email1, email2 \n";
			sql += "from member \n";
			sql += "where id=? and pass=? \n";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, map.get("userid"));
			pstmt.setString(2, map.get("userpwd"));
			
			rs = pstmt.executeQuery();
			if (rs.next()) {
				memberDto = new MemberDto();
				memberDto.setName(rs.getString("name"));
				memberDto.setId(rs.getString("id"));
				memberDto.setEmail1(rs.getString("email1"));
				memberDto.setEmail2(rs.getString("email2"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBClose.close(conn, pstmt, rs);
		}
		
		return memberDto;
	}
}
